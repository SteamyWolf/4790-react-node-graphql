{"version":3,"sources":["components/Header.js","components/LocationCard.js","components/Location.js","components/Favorites.js","contexts/IPdata.js","components/MapGoogle.js","components/Locations.js","App.js","reportWebVitals.js","index.js"],"names":["useStyles","makeStyles","theme","root","flexGrow","title","button","textDecoration","color","colors","Header","props","classes","AppBar","position","Toolbar","Typography","variant","className","to","Button","card","width","margin","marginTop","avatar","backgroundColor","error","success","LocationCard","data","saveToFavorites","errorMsg","favorited","ipAddressData","Card","CardActionArea","CardContent","gutterBottom","component","query","List","ListItem","ListItemAvatar","Avatar","style","fill","ListItemText","country","city","regionName","timezone","org","CardActions","size","startIcon","disabled","onClick","form","buttonDiv","textAlign","textField","red","Location","useState","setIpAddressData","ip","setIp","loading","setLoading","setFavorited","setErrorMsg","bigError","setBigError","fetchIpAddressData","a","axios","get","fetchedIpAddressData","console","log","status","message","post","region","organization","savedIP","CircularProgress","TextField","placeholder","value","onChange","e","target","Object","keys","length","constructor","ipData","display","flexWrap","justifyContent","editIcon","zIndex","top","right","textFieldCenter","alignItems","Favorites","mainLoading","setMainLoading","editingFavorite","setEditingFavorite","fetchFavorites","fetchedFavorites","mappedFavorites","map","favorite","editing","useEffect","deleteIP","delete","deletion","index","findIndex","address","_id","splice","saveChanges","id","put","updated","oldFavorite","find","indexOfOldFavorite","element","newIP","returnedFavorite","onChanges","event","string","ipAddress","IconButton","foundFavorite","newAddressData","onEditClick","type","defaultValue","IPdataContext","createContext","IPdataContextProvider","Provider","children","MapGoogle","withScriptjs","withGoogleMap","location","defaultZoom","coordinates","defaultCenter","lat","parseFloat","latitude","lng","longitude","locationsMain","cardContent","deleteIconDiv","bottom","cursor","actionArea","ALL_LOCATIONS","gql","UPDATE_COORDINATE","DELETE_LOCATION","DELETE_COORDINATE","Locations","locations","setLocations","useMutation","updateCoor","deleteLoc","deleteCoord","useQuery","locationsState","bool","allLocationMapped","allLocations","foundLocation","loc","newLocationData","CardMedia","googleMapURL","loadingElement","height","containerElement","mapElement","comppnent","name","description","onSubmit","preventDefault","formData","FormData","formArray","entries","key","obj","push","newArray","i","coorID","attributes","newLocation","findingsArr","forEach","coor","finding","filter","parseInt","control","organizedArr","coordinate","variables","completedLocation","newLocations","saveButtonClick","class","allCoordsDeleted","Promise","all","then","values","onDeleteLocation","App","IPdata","path","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","client","ApolloClient","uri","cache","InMemoryCache","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ada51644.chunk.js","sourcesContent":["import React from 'react';\nimport { AppBar, Toolbar, Typography, Button } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Link } from 'react-router-dom';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        flexGrow: 1,\n    },\n    title: {\n        flexGrow: 1,\n    },\n    button: {\n        textDecoration: 'none',\n        color: 'white'\n    },\n    colors: {\n        color: 'green'\n    }\n}));\n\n\n\nconst Header = (props) => {\n    const classes = useStyles();\n    return (\n        <div>\n            <AppBar position=\"static\">\n                <Toolbar>\n                    <Typography variant=\"h6\" className={classes.title}>\n                        <Link to=\"/\" className={classes.button}>IP Addresses</Link>\n                    </Typography>\n                    <Button>\n                        <Link to=\"/favorites\" className={classes.button}>Favorites</Link>\n                    </Button>\n                    <Button>\n                        <Link to=\"/locations\" className={classes.button}>Locations</Link>\n                    </Button>\n                </Toolbar>\n            </AppBar>\n        </div>\n    )\n}\n\nexport default Header;","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Button, Card, CardActionArea, Typography, CardContent, List, ListItem, ListItemAvatar, Avatar, ListItemText, CardActions } from '@material-ui/core';\nimport LocationCityIcon from '@material-ui/icons/LocationCity';\nimport PublicIcon from '@material-ui/icons/Public';\nimport LandscapeIcon from '@material-ui/icons/Landscape';\nimport ScheduleIcon from '@material-ui/icons/Schedule';\nimport BusinessCenterIcon from '@material-ui/icons/BusinessCenter';\nimport StarBorderIcon from '@material-ui/icons/StarBorder';\nimport StarIcon from '@material-ui/icons/Star';\n\nconst useStyles = makeStyles((theme) => ({\n    card: {\n        width: '500px',\n        margin: '0 auto',\n        marginTop: 30\n    },\n    avatar: {\n        backgroundColor: 'white'\n    },\n    error: {\n        color: 'red'\n    },\n    success: {\n        color: 'green'\n    }\n}));\n\nconst LocationCard = ( {data, saveToFavorites, errorMsg, favorited} ) => {\n    const classes = useStyles();\n    let ipAddressData = data;\n\n    return (\n        <>\n            <Card className={classes.card}>\n                    <CardActionArea>\n                        <CardContent>\n                            <Typography gutterBottom variant=\"h5\" component=\"h2\">\n                                IP: <b>{ipAddressData.query}</b>\n                            </Typography>\n                            <List>\n                                <ListItem>\n                                    <ListItemAvatar>\n                                        <Avatar className={classes.avatar}>\n                                            <PublicIcon style={{fill: 'blue'}}/>\n                                        </Avatar>\n                                    </ListItemAvatar>\n                                    <ListItemText>{ipAddressData.country}</ListItemText>\n                                </ListItem>\n                                <ListItem>\n                                    <ListItemAvatar>\n                                        <Avatar className={classes.avatar}>\n                                            <LocationCityIcon color=\"secondary\"/>\n                                        </Avatar>\n                                    </ListItemAvatar>\n                                    <ListItemText>{ipAddressData.city}</ListItemText>\n                                </ListItem>\n                                <ListItem>\n                                    <ListItemAvatar>\n                                        <Avatar className={classes.avatar}>\n                                            <LandscapeIcon style={{fill: 'green'}}/>\n                                        </Avatar>\n                                    </ListItemAvatar>\n                                    <ListItemText>{ipAddressData.regionName}</ListItemText>\n                                </ListItem>\n                                <ListItem>\n                                    <ListItemAvatar>\n                                        <Avatar className={classes.avatar}>\n                                            <ScheduleIcon style={{fill: 'orange'}}/>\n                                        </Avatar>\n                                    </ListItemAvatar>\n                                    <ListItemText>{ipAddressData.timezone}</ListItemText>\n                                </ListItem>\n                                <ListItem>\n                                    <ListItemAvatar>\n                                        <Avatar className={classes.avatar}>\n                                            <BusinessCenterIcon style={{fill: 'purple'}}/>\n                                        </Avatar>\n                                    </ListItemAvatar>\n                                    <ListItemText>{ipAddressData.org}</ListItemText>\n                                </ListItem>\n                            </List>\n                        </CardContent>\n                    </CardActionArea>\n                    <CardActions>\n                        <Button size=\"small\" color=\"primary\" variant=\"contained\" startIcon={favorited ? <StarIcon /> : <StarBorderIcon />} disabled={favorited} onClick={saveToFavorites}>\n                            Save to Favorites\n                        </Button>\n                        {favorited ? \n                            <p className={classes.success}>Successfully Saved to Favorites!</p>\n                        : errorMsg ?\n                            <p className={classes.error}>{errorMsg}</p>\n                        : null}\n                    </CardActions>\n                </Card>\n        </>\n    )\n}\n\nexport default LocationCard;","import React, { useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport axios from 'axios';\nimport { Button, TextField } from '@material-ui/core';\nimport LocationCard from './LocationCard';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nconst useStyles = makeStyles((theme) => ({\n    card: {\n        width: '500px',\n        margin: '0 auto',\n        marginTop: 30\n    },\n    avatar: {\n        backgroundColor: 'white'\n    },\n    form: {\n        margin: '0 auto',\n        width: '200px',\n        marginTop: 30\n    },\n    buttonDiv: {\n        width: '100%',\n        marginTop: 10,\n        textAlign: 'center'\n    },\n    textField: {\n        width: '100%'\n    },\n    red: {\n        color: 'crimson'\n    }\n}));\n\nconst Location = () => {\n    const classes = useStyles();\n    const [ipAddressData, setIpAddressData] = useState({});\n    const [ip, setIp] = useState('');\n    const [loading, setLoading] = useState(false);\n    const [favorited, setFavorited] = useState(false);\n    const [errorMsg, setErrorMsg] = useState('');\n    const [bigError, setBigError] = useState('')\n\n    const handleInputChange = (e) => setIp(e.target.value);\n\n    const fetchIpAddressData = async () => {\n        setLoading(true);\n        setFavorited(false);\n        setBigError('');\n        try {\n            const fetchedIpAddressData = await axios.get(`https://ip-address-app-wyatt.herokuapp.com/location/${ip}`);\n            console.log(fetchedIpAddressData.data)\n            if (fetchedIpAddressData.data.status === 'fail') {\n                setBigError(fetchedIpAddressData.data.message);\n                setLoading(false)\n                return;\n            }\n            setIpAddressData(fetchedIpAddressData.data)\n            setErrorMsg('');\n        } catch (err) {\n            console.log(err)\n        }\n        setLoading(false)\n    }\n\n    const saveToFavorites = async () => {\n        setLoading(true)\n        try {\n            if (ipAddressData.org === '') {\n                setLoading(false);\n                setErrorMsg('Organization Required')\n            }\n            const savedIP = await axios.post('https://ip-address-app-wyatt.herokuapp.com/location/saveLocation', {\n                ip: ipAddressData.query,\n                country: ipAddressData.country,\n                city: ipAddressData.city,\n                region: ipAddressData.regionName,\n                timezone: ipAddressData.timezone,\n                organization: ipAddressData.org\n            })\n            console.log(savedIP)\n            setFavorited(true);\n        } catch(err) {\n            console.log(err)\n            setFavorited(false);\n        }\n        setLoading(false)\n    }\n\n    return (\n        <>\n            {loading ? <CircularProgress /> : null}\n            {bigError ? <div className={classes.red}>{bigError}</div>: null}\n            <form className={classes.form}>\n                <TextField className={classes.textField} placeholder=\"Enter IP Address here\" value={ip} onChange={handleInputChange}/>\n                <div className={classes.buttonDiv}>\n                    <Button color=\"primary\" variant=\"contained\" onClick={fetchIpAddressData} disabled={!ip}>Enter</Button>\n                </div>\n            </form>\n            {ipAddressData && Object.keys(ipAddressData).length > 0 && ipAddressData.constructor === Object ? \n                <LocationCard data={ipAddressData} saveToFavorites={saveToFavorites} errorMsg={errorMsg} favorited={favorited}/>\n            : null}\n        </>\n    )\n}\n\nexport default Location;","import React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { TextField, Button, Card, CardActionArea, Typography, CardContent, List, ListItem, ListItemAvatar, Avatar, ListItemText, CardActions, IconButton } from '@material-ui/core';\nimport LocationCityIcon from '@material-ui/icons/LocationCity';\nimport PublicIcon from '@material-ui/icons/Public';\nimport LandscapeIcon from '@material-ui/icons/Landscape';\nimport ScheduleIcon from '@material-ui/icons/Schedule';\nimport BusinessCenterIcon from '@material-ui/icons/BusinessCenter';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport EditIcon from '@material-ui/icons/Edit';\nimport SaveAltIcon from '@material-ui/icons/SaveAlt';\n\nconst useStyles = makeStyles((theme) => ({\n    ipData: {\n        display: 'flex',\n        flexWrap: 'wrap',\n        justifyContent: 'space-evenly'\n    },\n    card: {\n        width: '500px',\n        margin: '0 auto',\n        marginTop: 30,\n        position: 'relative'\n    },\n    editIcon: {\n        zIndex: 1,\n        position: 'absolute',\n        top: 0,\n        right: 0\n    },\n    avatar: {\n        backgroundColor: 'white'\n    },\n    form: {\n        margin: '0 auto',\n        width: '200px'\n    },\n    buttonDiv: {\n        width: '100%',\n        marginTop: 10,\n        textAlign: 'center'\n    },\n    textField: {\n        width: '100%'\n    },\n    textFieldCenter: {\n        display: 'flex',\n        alignItems: 'center'\n    }\n}));\n\nconst Favorites = () => {\n    const classes = useStyles();\n    const [ipAddressData, setIpAddressData] = useState([])\n    const [loading, setLoading] = useState(false);\n    const [mainLoading, setMainLoading] = useState(false)\n    const [editingFavorite, setEditingFavorite] = useState(\n        {\n            ip: '',\n            country: '',\n            city: '',\n            region: '',\n            timezone: '',\n            organization: ''\n        }\n    )\n\n    const fetchFavorites = async () => {\n        try {\n            setMainLoading(true);\n            const fetchedFavorites = await axios.get('https://ip-address-app-wyatt.herokuapp.com/location/favorites')\n            let mappedFavorites = fetchedFavorites.data.map(favorite => ({editing: false, ...favorite}))\n            setIpAddressData(mappedFavorites)\n            setMainLoading(false);\n        } catch (err) {\n            console.log(err)\n        }\n    }\n\n    useEffect(() => {\n        fetchFavorites();\n    }, [])\n\n    const deleteIP = async (ip) => {\n        setLoading(true);\n        let deletion = await axios.delete(`https://ip-address-app-wyatt.herokuapp.com/location/delete/${ip}`);\n        let index = ipAddressData.findIndex(address => address._id === deletion.data._id)\n        if (ipAddressData.length === 1) {\n            setIpAddressData([])\n        } else {\n            ipAddressData.splice(index, 1)\n            setIpAddressData(ipAddressData)\n        }\n        setLoading(false);\n    }\n\n    const onEditClick = (id) => {\n        let foundFavorite = ipAddressData.find(favorite => favorite._id === id)\n        setEditingFavorite(foundFavorite)\n        foundFavorite.editing = !foundFavorite.editing;\n        let index = ipAddressData.findIndex(element => element._id === foundFavorite._id)\n        let newAddressData = [...ipAddressData]\n        newAddressData.splice(index, 1, foundFavorite)\n        setIpAddressData(newAddressData)\n    }\n\n    const saveChanges = async (id) => {\n        let updated = await axios.put(`https://ip-address-app-wyatt.herokuapp.com/location/put`, editingFavorite);\n        let oldFavorite = ipAddressData.find(favorite => favorite._id === id);\n        let indexOfOldFavorite = ipAddressData.findIndex(element => element._id === oldFavorite._id)\n        let newIP = [...ipAddressData]\n        let returnedFavorite = {editing: false, ...updated.data};\n        newIP.splice(indexOfOldFavorite, 1, returnedFavorite)\n        setIpAddressData(newIP)\n\n\n    }\n\n    const onChanges = (event, string, id) => {\n        if (string === 'ip') {\n            setEditingFavorite({...editingFavorite, ip: event.target.value})\n        } else if (string === 'country') {\n            setEditingFavorite({...editingFavorite, country: event.target.value})\n        } else if (string === 'city') {\n            setEditingFavorite({...editingFavorite, city: event.target.value})\n        } else if (string === 'region') {\n            setEditingFavorite({...editingFavorite, region: event.target.value})\n        } else if (string === 'timezone') {\n            setEditingFavorite({...editingFavorite, timezone: event.target.value})\n        } else if (string === 'organization') {\n            setEditingFavorite({...editingFavorite, organization: event.target.value})\n        } else {\n            console.log('ERROR!!!')\n        }\n        \n    }\n\n    return (\n        <>\n        {mainLoading ?\n            <div className=\"test\">\n                <CircularProgress />\n            </div>\n        : null}\n       {ipAddressData.length < 1 ? <div>You have no saved favorites. Go save some!</div> :\n            <div className={classes.ipData}>\n                {ipAddressData.map(ipAddress => {\n                        return (\n                            <Card className={classes.card} key={ipAddress._id}>\n                                <IconButton className={classes.editIcon} onClick={() => onEditClick(ipAddress._id, null)}>\n                                    <EditIcon  />\n                                </IconButton>\n                                    <CardActionArea>\n                                        <CardContent>\n                                            <Typography gutterBottom variant=\"h5\" component=\"h2\">\n                                                {!ipAddress.editing ? <div>IP: <b>{ipAddress.ip}</b></div> :   \n                                                    <div className={classes.textFieldCenter}>\n                                                        IP: <TextField type=\"text\" defaultValue={ipAddress.ip} variant=\"outlined\" onChange={(e) => onChanges(e, 'ip', ipAddress._id)} />\n                                                    </div>\n                                                }\n                                            </Typography>\n                                            <List>\n                                                <ListItem>\n                                                    <ListItemAvatar>\n                                                        <Avatar className={classes.avatar}>\n                                                            <PublicIcon style={{fill: 'blue'}}/>\n                                                        </Avatar>\n                                                    </ListItemAvatar>\n                                                    <ListItemText>\n                                                        {!ipAddress.editing ? ipAddress.country : \n                                                            <div>\n                                                                <TextField variant=\"outlined\" defaultValue={ipAddress.country} onChange={(e) => onChanges(e, 'country', ipAddress._id)} />\n                                                            </div>\n                                                        }\n                                                    </ListItemText>\n                                                </ListItem>\n                                                <ListItem>\n                                                    <ListItemAvatar>\n                                                        <Avatar className={classes.avatar}>\n                                                            <LocationCityIcon color=\"secondary\"/>\n                                                        </Avatar>\n                                                    </ListItemAvatar>\n                                                    <ListItemText>\n                                                        {!ipAddress.editing ? ipAddress.city : \n                                                            <div>\n                                                                <TextField variant=\"outlined\" defaultValue={ipAddress.city} onChange={(e) => onChanges(e, 'city', ipAddress._id)} />\n                                                            </div>\n                                                        }\n                                                        </ListItemText>\n                                                </ListItem>\n                                                <ListItem>\n                                                    <ListItemAvatar>\n                                                        <Avatar className={classes.avatar}>\n                                                            <LandscapeIcon style={{fill: 'green'}}/>\n                                                        </Avatar>\n                                                    </ListItemAvatar>\n                                                    <ListItemText>\n                                                        {!ipAddress.editing ? ipAddress.region :\n                                                            <div>\n                                                                <TextField variant=\"outlined\" defaultValue={ipAddress.region} onChange={(e) => onChanges(e, 'region', ipAddress._id)} />\n                                                            </div>\n                                                        }\n                                                        </ListItemText>\n                                                </ListItem>\n                                                <ListItem>\n                                                    <ListItemAvatar>\n                                                        <Avatar className={classes.avatar}>\n                                                            <ScheduleIcon style={{fill: 'orange'}}/>\n                                                        </Avatar>\n                                                    </ListItemAvatar>\n                                                    <ListItemText>\n                                                        {!ipAddress.editing ? ipAddress.timezone :\n                                                            <div>\n                                                                <TextField variant=\"outlined\" defaultValue={ipAddress.timezone} onChange={(e) => onChanges(e, 'timezone', ipAddress._id)} />\n                                                            </div>\n                                                        }\n                                                        </ListItemText>\n                                                </ListItem>\n                                                <ListItem>\n                                                    <ListItemAvatar>\n                                                        <Avatar className={classes.avatar}>\n                                                            <BusinessCenterIcon style={{fill: 'purple'}}/>\n                                                        </Avatar>\n                                                    </ListItemAvatar>\n                                                    <ListItemText>\n                                                        {!ipAddress.editing ? ipAddress.organization :\n                                                            <div>\n                                                                <TextField variant=\"outlined\" defaultValue={ipAddress.organization} onChange={(e) => onChanges(e, 'organization', ipAddress._id)} />\n                                                            </div>\n                                                        }\n                                                    </ListItemText>\n                                                </ListItem>\n                                            </List>\n                                        </CardContent>\n                                    </CardActionArea>\n                                    <CardActions>\n                                        {!ipAddress.editing ?\n                                            <Button size=\"small\" color=\"secondary\" variant=\"contained\" startIcon={<DeleteIcon />} onClick={() => deleteIP(ipAddress._id)}>\n                                                Delete\n                                            </Button>\n                                        : \n                                            <Button size=\"small\" color=\"primary\" variant=\"contained\" startIcon={<SaveAltIcon />} onClick={() => saveChanges(ipAddress._id)}>Save Changes</Button>\n                                        }\n                                    </CardActions>\n                                </Card>\n                        )\n                    })} \n   </div>\n       }\n        \n        </>\n    )\n}\n\nexport default Favorites;","import React, { useState, createContext } from 'react';\n\nexport const IPdataContext = createContext();\n\nconst IPdataContextProvider = (props) => {\n    const [ipAddressData] = useState({})\n\n    return (\n        <IPdataContext.Provider value={{ipAddressData}}>\n            {props.children}\n        </IPdataContext.Provider>\n    )\n}\n\nexport default IPdataContextProvider;","import React from \"react\";\nimport { withScriptjs, withGoogleMap, GoogleMap } from \"react-google-maps\";\n\nconst MapGoogle = withScriptjs(\n  withGoogleMap(({location}) => {\n    return (\n      <GoogleMap\n        defaultZoom={location.coordinates.length === 0 ? 1 : 10}\n        defaultCenter={{\n          lat: parseFloat(location.coordinates.length === 0 ? 1 : location.coordinates[0].latitude),\n          lng: parseFloat(location.coordinates.length === 0 ? 1 : location.coordinates[0].longitude)\n        }}\n      />\n    );\n  })\n);\n\nexport default MapGoogle;","import React, { useEffect, useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Button, Card, CardActionArea, Typography, CardContent, CardActions, IconButton, CardMedia } from '@material-ui/core';\nimport EditIcon from '@material-ui/icons/Edit';\nimport { useQuery, gql, useMutation } from '@apollo/client';\nimport MapGoogle from './MapGoogle';\nimport DeleteIcon from '@material-ui/icons/Delete';\n\nconst useStyles = makeStyles((theme) => ({\n    locationsMain: {\n        display: 'flex',\n        flexWrap: 'wrap',\n        justifyContent: 'space-evenly'\n    },\n    card: {\n        width: '400px',\n        margin: '30px 20px',\n        position: 'relative'\n    },\n    cardContent: {\n        position: 'relative'\n    },\n    editIcon: {\n        zIndex: 1,\n        position: 'absolute',\n        top: 0,\n        right: 0\n    },\n    avatar: {\n        backgroundColor: 'white'\n    },\n    form: {\n        margin: '0 auto',\n        width: '200px'\n    },\n    buttonDiv: {\n        width: '100%',\n        marginTop: 10,\n        textAlign: 'center'\n    },\n    textField: {\n        width: '100%'\n    },\n    textFieldCenter: {\n        display: 'flex',\n        alignItems: 'center'\n    },\n    deleteIconDiv: {\n        position: 'absolute',\n        right: 10,\n        bottom: 4,\n        cursor: 'pointer'\n    },\n    actionArea: {\n        position: 'relative'\n    }\n}));\n\nconst ALL_LOCATIONS = gql`\n    query {\n        allLocations {\n            id\n            name\n            description\n            coordinates {\n              id\n              longitude\n              latitude\n            }\n          }\n    }\n`\n\nconst UPDATE_COORDINATE = gql`\n    mutation updateCoordinate($id: Int!, $data: CoordinateCreateInput!) {\n        updateCoordinate(id: $id, data: $data) {\n            id\n            latitude\n            longitude\n        }\n    }\n`\n\nconst DELETE_LOCATION = gql`\n    mutation deleteLocation($id: Int!) {\n        deleteLocation(id: $id) {\n            id\n            name\n        }\n    }\n`\n\nconst DELETE_COORDINATE = gql`\n    mutation deleteCoordinate($id: Int!) {\n        deleteCoordinate(id: $id) {\n            id\n            latitude\n            longitude\n        }\n    }\n`\n\n\n\nconst Locations = () => {\n    const classes = useStyles();\n    const [locations, setLocations] = useState([]);\n    const [updateCoor] = useMutation(UPDATE_COORDINATE);\n    const [deleteLoc] = useMutation(DELETE_LOCATION);\n    const [deleteCoord] = useMutation(DELETE_COORDINATE);\n\n    const { loading, error, data } = useQuery(ALL_LOCATIONS)\n    if (loading) {\n        console.log('Currently Loading', loading)\n    }\n    if (error) {\n        console.log('error', error)\n    }\n    const locationsState = (bool) => {\n        if (!bool) {\n            let allLocationMapped = data.allLocations.map(location => {\n                return { ...location, editing: false}\n            })\n            setLocations(allLocationMapped)\n            console.log(locations)\n        }\n    }\n    useEffect(() => {\n        locationsState(loading);\n    }, [loading])\n\n    const onEditClick = (location) => {\n        console.log(location)\n        console.log('clicked onEdit')\n        let foundLocation = locations.find(loc => loc.id === location.id);\n        foundLocation.editing = !foundLocation.editing;\n        let index = locations.findIndex(element => element.id === foundLocation.id)\n        let newLocationData = [...locations];\n        newLocationData.splice(index, 1, foundLocation);\n        setLocations(newLocationData);\n    }\n\n    const saveButtonClick = (event, location) => {\n        event.preventDefault();\n        if (location.coordinates.length === 0) {\n            console.log(event)\n        }\n        location.editing = false;\n        const formData = new FormData(event.target)\n        const formArray = [];\n        for (let [key, value] of formData.entries()) {\n            if (key === 'latitude') {\n                let obj = { latitude: value }\n                formArray.push(obj);\n            } else if (key === 'longitude') {\n                let obj = { longitude: value }\n                formArray.push(obj)\n            }\n        }\n        const newArray = [];\n        for (let i = 0; i < formArray.length; i++) {\n            let coorID = event.target[i].attributes[2].value\n            newArray.push({...formArray[i], id: coorID})\n        }\n\n        const newLocation = {...location};\n        const findingsArr = [];\n        newLocation.coordinates.forEach(coor => {\n            let finding = newArray.filter(obj => coor.id === parseInt(obj.id))\n            let control = {...finding[0], ...finding[1]}\n            findingsArr.push(control)\n        })\n\n        const organizedArr = findingsArr.map(obj => {\n            return {...obj, id: parseInt(obj.id)}\n        })\n        console.log(organizedArr)\n        organizedArr.forEach(coordinate => {\n            updateCoor({variables: { id: coordinate.id, data: {longitude: coordinate.longitude, latitude: coordinate.latitude}}})\n        })\n\n        locationsState(false);\n\n        const completedLocation = {...location, coordinates: organizedArr}\n        let index = locations.findIndex(loc => loc.id === completedLocation.id)\n        let newLocations = [...locations];\n        newLocations.splice(index, 1, completedLocation);\n        setLocations(newLocations);\n    }\n\n    const onDeleteLocation = (location) => {\n        if (location.coordinates.length > 0) {\n            let allCoordsDeleted = location.coordinates.map(coor => {\n                return deleteCoord({variables: { id: coor.id }})\n            })\n            Promise.all(allCoordsDeleted).then(values => {\n                deleteLoc({variables: { id: location.id }})\n            }) \n        } else {\n            deleteLoc({variables: { id: location.id }})\n        }\n        \n        let index = locations.findIndex(loc => loc.id === location.id)\n        let newLocations = [...locations];\n        newLocations.splice(index, 1);\n        setLocations(newLocations)\n\n        // \n    }\n\n\n    return (\n        <>\n        {locations.length === 0 ?\n            <div>Loading Data...</div>\n        : \n            <div className={classes.locationsMain}>\n                {locations.map(location => {\n                    return (\n                        <Card className={classes.card} key={location.id}>\n                            <CardActionArea>\n                                <CardMedia>\n                                    <MapGoogle googleMapURL={`https:////maps.googleapis.com/maps/api/js?v=3.exp&libraries=geometry,drawing,places&key`} //=${process.env.REACT_APP_GOOGLE_KEY}\n                                               location={location} \n                                               loadingElement={<div style={{ height: `100%` }} />}\n                                               containerElement={<div style={{ height: `400px` }} />} \n                                               mapElement={<div style={{ height: `100%` }} />}\n                                    />\n                                </CardMedia>\n                                <CardContent className={classes.cardContent}>\n                                    <Typography gutterBottom variant=\"h5\" comppnent=\"h2\">\n                                        {location.name}\n                                    </Typography>\n                                    <Typography>\n                                        {location.description}\n                                    </Typography>\n                                        <form onSubmit={(e) => saveButtonClick(e, location)}>\n                                            {location.coordinates.length === 0 \n                                                ? \n                                                    // <Typography variant=\"body2\" color=\"textSecondary\" component=\"div\">\n                                                    //     <div>Latitude: {!location.editing ? 1 : <input type=\"text\" name=\"latitude\" data={Math.round(Math.random() * 1000)} defaultValue={1} />}</div>\n                                                    //     <div>Longitude: {!location.editing ? 1 : <input type=\"text\" name=\"latitude\" data={Math.round(Math.random() * 1000)} defaultValue={1} />}</div>\n                                                    // </Typography> \n                                                    <p>You must add a coordinate to display the map correctly.{<br></br>} (In progress)</p>\n                                                : \n                                                    location.coordinates.map(coordinate => {\n                                                        return (\n                                                            <Typography variant=\"body2\" color=\"textSecondary\" component=\"div\" key={coordinate.id}>\n                                                                <div>Latitude: { !location.editing ? coordinate.latitude : <input type=\"text\" name=\"latitude\" data={coordinate.id} defaultValue={coordinate.latitude} /> }</div>\n                                                                <div>Longitude: {!location.editing ? coordinate.longitude : <input type=\"text\" name=\"longitude\" data={coordinate.id} defaultValue={coordinate.longitude} />}</div>\n                                                                <hr></hr>\n                                                            </Typography>\n                                                        )\n                                                    })\n                                            }\n                                            {location.editing \n                                                ?\n                                                    <div>\n                                                        <Button color=\"primary\" variant=\"contained\" type=\"submit\">Save</Button>\n                                                        <Button variant=\"contained\" onClick={() => onEditClick(location)}>Cancel</Button>\n                                                    </div>\n                                                :\n                                                    null\n                                            }\n                                        </form>\n                                    {location.coordinates.length === 0 ? null : \n                                        <IconButton className={classes.editIcon} onClick={() => onEditClick(location)}>\n                                            <EditIcon />\n                                        </IconButton>\n                                    }\n                                </CardContent>\n                            </CardActionArea>\n                            <CardActions>\n                                <div class={classes.deleteIconDiv}>\n                                    <DeleteIcon onClick={() => onDeleteLocation(location)} />\n                                </div>\n                            </CardActions>\n                        </Card>\n                    )\n                })}\n            </div>\n        }\n        </>\n    )\n}\n\nexport default Locations;","import './App.css';\nimport Header from './components/Header';\nimport Location from './components/Location';\nimport { Switch, Route } from 'react-router-dom';\nimport Favorites from './components/Favorites';\nimport IPdataContextProvider from './contexts/IPdata';\nimport Locations from './components/Locations';\n\n\nconst App = () => {\n  return (\n    <div>\n      <Header />\n      <IPdataContextProvider>\n        <Switch>\n          <Route path='/favorites' component={Favorites}/>\n          <Route path='/locations' component={Locations}/>\n          <Route path='/' exact component={Location}/>\n        </Switch>\n      </IPdataContextProvider>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { BrowserRouter } from 'react-router-dom';\nimport { ApolloClient, ApolloProvider, InMemoryCache } from '@apollo/client';\n\nconst client = new ApolloClient({\n  uri: 'http://localhost:4000/graphql/',\n  cache: new InMemoryCache(),\n})\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <ApolloProvider client={client}>\n        <App />\n      </ApolloProvider>\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}