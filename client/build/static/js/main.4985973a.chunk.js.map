{"version":3,"sources":["components/Header.js","components/LocationCard.js","components/Location.js","components/Favorites.js","contexts/IPdata.js","App.js","reportWebVitals.js","index.js"],"names":["useStyles","makeStyles","theme","root","flexGrow","title","button","textDecoration","color","colors","Header","props","classes","AppBar","position","Toolbar","Typography","variant","className","to","Button","card","width","margin","marginTop","avatar","backgroundColor","error","success","LocationCard","data","saveToFavorites","errorMsg","favorited","ipAddressData","Card","CardActionArea","CardContent","gutterBottom","component","query","List","ListItem","ListItemAvatar","Avatar","style","fill","ListItemText","country","city","regionName","timezone","org","CardActions","size","startIcon","disabled","onClick","form","buttonDiv","textAlign","textField","red","Location","useState","setIpAddressData","ip","setIp","loading","setLoading","setFavorited","setErrorMsg","bigError","setBigError","fetchIpAddressData","a","axios","get","fetchedIpAddressData","console","log","status","message","post","region","organization","savedIP","CircularProgress","TextField","placeholder","value","onChange","e","target","Object","keys","length","constructor","ipData","display","flexWrap","justifyContent","editIcon","zIndex","top","right","textFieldCenter","alignItems","Favorites","editingFavorite","setEditingFavorite","fetchFavorites","fetchedFavorites","mappedFavorites","map","favorite","editing","useEffect","deleteIP","delete","deletion","index","findIndex","address","_id","splice","saveChanges","id","put","updated","oldFavorite","find","indexOfOldFavorite","element","newIP","returnedFavorite","onChanges","event","string","ipAddress","IconButton","foundFavorite","newAddressData","onEditClick","type","defaultValue","IPdataContext","createContext","IPdataContextProvider","Provider","children","App","IPdata","path","exact","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4985973a.chunk.js","sourcesContent":["import React from 'react';\nimport { AppBar, Toolbar, Typography, Button } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Link } from 'react-router-dom';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        flexGrow: 1,\n    },\n    title: {\n        flexGrow: 1,\n    },\n    button: {\n        textDecoration: 'none',\n        color: 'white'\n    },\n    colors: {\n        color: 'green'\n    }\n}));\n\n\n\nconst Header = (props) => {\n    const classes = useStyles();\n    return (\n        <div>\n            <AppBar position=\"static\">\n                <Toolbar>\n                    <Typography variant=\"h6\" className={classes.title}>\n                        <Link to=\"/\" className={classes.button}>IP Addresses</Link>\n                    </Typography>\n                    <Button>\n                        <Link to=\"/favorites\" className={classes.button}>Favorites</Link>\n                    </Button>\n                </Toolbar>\n            </AppBar>\n        </div>\n    )\n}\n\nexport default Header;","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Button, Card, CardActionArea, Typography, CardContent, List, ListItem, ListItemAvatar, Avatar, ListItemText, CardActions } from '@material-ui/core';\nimport LocationCityIcon from '@material-ui/icons/LocationCity';\nimport PublicIcon from '@material-ui/icons/Public';\nimport LandscapeIcon from '@material-ui/icons/Landscape';\nimport ScheduleIcon from '@material-ui/icons/Schedule';\nimport BusinessCenterIcon from '@material-ui/icons/BusinessCenter';\nimport StarBorderIcon from '@material-ui/icons/StarBorder';\nimport StarIcon from '@material-ui/icons/Star';\n\nconst useStyles = makeStyles((theme) => ({\n    card: {\n        width: '500px',\n        margin: '0 auto',\n        marginTop: 30\n    },\n    avatar: {\n        backgroundColor: 'white'\n    },\n    error: {\n        color: 'red'\n    },\n    success: {\n        color: 'green'\n    }\n}));\n\nconst LocationCard = ( {data, saveToFavorites, errorMsg, favorited} ) => {\n    const classes = useStyles();\n    let ipAddressData = data;\n\n    return (\n        <>\n            <Card className={classes.card}>\n                    <CardActionArea>\n                        <CardContent>\n                            <Typography gutterBottom variant=\"h5\" component=\"h2\">\n                                IP: <b>{ipAddressData.query}</b>\n                            </Typography>\n                            <List>\n                                <ListItem>\n                                    <ListItemAvatar>\n                                        <Avatar className={classes.avatar}>\n                                            <PublicIcon style={{fill: 'blue'}}/>\n                                        </Avatar>\n                                    </ListItemAvatar>\n                                    <ListItemText>{ipAddressData.country}</ListItemText>\n                                </ListItem>\n                                <ListItem>\n                                    <ListItemAvatar>\n                                        <Avatar className={classes.avatar}>\n                                            <LocationCityIcon color=\"secondary\"/>\n                                        </Avatar>\n                                    </ListItemAvatar>\n                                    <ListItemText>{ipAddressData.city}</ListItemText>\n                                </ListItem>\n                                <ListItem>\n                                    <ListItemAvatar>\n                                        <Avatar className={classes.avatar}>\n                                            <LandscapeIcon style={{fill: 'green'}}/>\n                                        </Avatar>\n                                    </ListItemAvatar>\n                                    <ListItemText>{ipAddressData.regionName}</ListItemText>\n                                </ListItem>\n                                <ListItem>\n                                    <ListItemAvatar>\n                                        <Avatar className={classes.avatar}>\n                                            <ScheduleIcon style={{fill: 'orange'}}/>\n                                        </Avatar>\n                                    </ListItemAvatar>\n                                    <ListItemText>{ipAddressData.timezone}</ListItemText>\n                                </ListItem>\n                                <ListItem>\n                                    <ListItemAvatar>\n                                        <Avatar className={classes.avatar}>\n                                            <BusinessCenterIcon style={{fill: 'purple'}}/>\n                                        </Avatar>\n                                    </ListItemAvatar>\n                                    <ListItemText>{ipAddressData.org}</ListItemText>\n                                </ListItem>\n                            </List>\n                        </CardContent>\n                    </CardActionArea>\n                    <CardActions>\n                        <Button size=\"small\" color=\"primary\" variant=\"contained\" startIcon={favorited ? <StarIcon /> : <StarBorderIcon />} disabled={favorited} onClick={saveToFavorites}>\n                            Save to Favorites\n                        </Button>\n                        {favorited ? \n                            <p className={classes.success}>Successfully Saved to Favorites!</p>\n                        : errorMsg ?\n                            <p className={classes.error}>{errorMsg}</p>\n                        : null}\n                    </CardActions>\n                </Card>\n        </>\n    )\n}\n\nexport default LocationCard;","import React, { useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport axios from 'axios';\nimport { Button, TextField } from '@material-ui/core';\nimport LocationCard from './LocationCard';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nconst useStyles = makeStyles((theme) => ({\n    card: {\n        width: '500px',\n        margin: '0 auto',\n        marginTop: 30\n    },\n    avatar: {\n        backgroundColor: 'white'\n    },\n    form: {\n        margin: '0 auto',\n        width: '200px',\n        marginTop: 30\n    },\n    buttonDiv: {\n        width: '100%',\n        marginTop: 10,\n        textAlign: 'center'\n    },\n    textField: {\n        width: '100%'\n    },\n    red: {\n        color: 'crimson'\n    }\n}));\n\nconst Location = () => {\n    const classes = useStyles();\n    const [ipAddressData, setIpAddressData] = useState({});\n    const [ip, setIp] = useState('');\n    const [loading, setLoading] = useState(false);\n    const [favorited, setFavorited] = useState(false);\n    const [errorMsg, setErrorMsg] = useState('');\n    const [bigError, setBigError] = useState('')\n\n    const handleInputChange = (e) => setIp(e.target.value);\n\n    const fetchIpAddressData = async () => {\n        setLoading(true);\n        setFavorited(false);\n        setBigError('');\n        try {\n            const fetchedIpAddressData = await axios.get(`https://ip-address-app-wyatt.herokuapp.com/location/${ip}`);\n            console.log(fetchedIpAddressData.data)\n            if (fetchedIpAddressData.data.status === 'fail') {\n                setBigError(fetchedIpAddressData.data.message);\n                setLoading(false)\n                return;\n            }\n            setIpAddressData(fetchedIpAddressData.data)\n            setErrorMsg('');\n        } catch (err) {\n            console.log(err)\n        }\n        setLoading(false)\n    }\n\n    const saveToFavorites = async () => {\n        setLoading(true)\n        try {\n            if (ipAddressData.org === '') {\n                setLoading(false);\n                setErrorMsg('Organization Required')\n            }\n            const savedIP = await axios.post('https://ip-address-app-wyatt.herokuapp.com/location/saveLocation', {\n                ip: ipAddressData.query,\n                country: ipAddressData.country,\n                city: ipAddressData.city,\n                region: ipAddressData.regionName,\n                timezone: ipAddressData.timezone,\n                organization: ipAddressData.org\n            })\n            console.log(savedIP)\n            setFavorited(true);\n        } catch(err) {\n            console.log(err)\n            setFavorited(false);\n        }\n        setLoading(false)\n    }\n\n    return (\n        <>\n            {loading ? <CircularProgress /> : null}\n            {bigError ? <div className={classes.red}>{bigError}</div>: null}\n            <form className={classes.form}>\n                <TextField className={classes.textField} placeholder=\"Enter IP Address here\" value={ip} onChange={handleInputChange}/>\n                <div className={classes.buttonDiv}>\n                    <Button color=\"primary\" variant=\"contained\" onClick={fetchIpAddressData} disabled={!ip}>Enter</Button>\n                </div>\n            </form>\n            {ipAddressData && Object.keys(ipAddressData).length > 0 && ipAddressData.constructor === Object ? \n                <LocationCard data={ipAddressData} saveToFavorites={saveToFavorites} errorMsg={errorMsg} favorited={favorited}/>\n            : null}\n        </>\n    )\n}\n\nexport default Location;","import React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { TextField, Button, Card, CardActionArea, Typography, CardContent, List, ListItem, ListItemAvatar, Avatar, ListItemText, CardActions, IconButton } from '@material-ui/core';\nimport LocationCityIcon from '@material-ui/icons/LocationCity';\nimport PublicIcon from '@material-ui/icons/Public';\nimport LandscapeIcon from '@material-ui/icons/Landscape';\nimport ScheduleIcon from '@material-ui/icons/Schedule';\nimport BusinessCenterIcon from '@material-ui/icons/BusinessCenter';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport EditIcon from '@material-ui/icons/Edit';\nimport SaveAltIcon from '@material-ui/icons/SaveAlt';\n\nconst useStyles = makeStyles((theme) => ({\n    ipData: {\n        display: 'flex',\n        flexWrap: 'wrap',\n        justifyContent: 'space-evenly'\n    },\n    card: {\n        width: '500px',\n        margin: '0 auto',\n        marginTop: 30,\n        position: 'relative'\n    },\n    editIcon: {\n        zIndex: 1,\n        position: 'absolute',\n        top: 0,\n        right: 0\n    },\n    avatar: {\n        backgroundColor: 'white'\n    },\n    form: {\n        margin: '0 auto',\n        width: '200px'\n    },\n    buttonDiv: {\n        width: '100%',\n        marginTop: 10,\n        textAlign: 'center'\n    },\n    textField: {\n        width: '100%'\n    },\n    textFieldCenter: {\n        display: 'flex',\n        alignItems: 'center'\n    }\n}));\n\nconst Favorites = () => {\n    const classes = useStyles();\n    const [ipAddressData, setIpAddressData] = useState([])\n    const [loading, setLoading] = useState(false);\n    const [editingFavorite, setEditingFavorite] = useState(\n        {\n            ip: '',\n            country: '',\n            city: '',\n            region: '',\n            timezone: '',\n            organization: ''\n        }\n    )\n\n    const fetchFavorites = async () => {\n        try {\n            const fetchedFavorites = await axios.get('https://ip-address-app-wyatt.herokuapp.com/location/favorites')\n            let mappedFavorites = fetchedFavorites.data.map(favorite => ({editing: false, ...favorite}))\n            setIpAddressData(mappedFavorites)\n        } catch (err) {\n            console.log(err)\n        }\n    }\n\n    useEffect(() => {\n        fetchFavorites();\n    }, [])\n\n    const deleteIP = async (ip) => {\n        setLoading(true);\n        let deletion = await axios.delete(`https://ip-address-app-wyatt.herokuapp.com/location/delete/${ip}`);\n        let index = ipAddressData.findIndex(address => address._id === deletion.data._id)\n        if (ipAddressData.length === 1) {\n            setIpAddressData([])\n        } else {\n            ipAddressData.splice(index, 1)\n            setIpAddressData(ipAddressData)\n        }\n        setLoading(false);\n    }\n\n    const onEditClick = (id) => {\n        let foundFavorite = ipAddressData.find(favorite => favorite._id === id)\n        setEditingFavorite(foundFavorite)\n        foundFavorite.editing = !foundFavorite.editing;\n        let index = ipAddressData.findIndex(element => element._id === foundFavorite._id)\n        let newAddressData = [...ipAddressData]\n        newAddressData.splice(index, 1, foundFavorite)\n        setIpAddressData(newAddressData)\n    }\n\n    const saveChanges = async (id) => {\n        let updated = await axios.put(`https://ip-address-app-wyatt.herokuapp.com/location/put`, editingFavorite);\n        let oldFavorite = ipAddressData.find(favorite => favorite._id === id);\n        let indexOfOldFavorite = ipAddressData.findIndex(element => element._id === oldFavorite._id)\n        let newIP = [...ipAddressData]\n        let returnedFavorite = {editing: false, ...updated.data};\n        newIP.splice(indexOfOldFavorite, 1, returnedFavorite)\n        setIpAddressData(newIP)\n\n\n    }\n\n    const onChanges = (event, string, id) => {\n        if (string === 'ip') {\n            setEditingFavorite({...editingFavorite, ip: event.target.value})\n        } else if (string === 'country') {\n            setEditingFavorite({...editingFavorite, country: event.target.value})\n        } else if (string === 'city') {\n            setEditingFavorite({...editingFavorite, city: event.target.value})\n        } else if (string === 'region') {\n            setEditingFavorite({...editingFavorite, region: event.target.value})\n        } else if (string === 'timezone') {\n            setEditingFavorite({...editingFavorite, timezone: event.target.value})\n        } else if (string === 'organization') {\n            setEditingFavorite({...editingFavorite, organization: event.target.value})\n        } else {\n            console.log('ERROR!!!')\n        }\n        \n    }\n\n    return (\n        <>\n        {loading ?\n            <div className=\"test\">\n                <CircularProgress />\n            </div>\n        : null}\n       {ipAddressData.length < 1 ? <div>You have no saved favorites. Go save some!</div> :\n            <div className={classes.ipData}>\n                {ipAddressData.map(ipAddress => {\n                        return (\n                            <Card className={classes.card} key={ipAddress._id}>\n                                <IconButton className={classes.editIcon} onClick={() => onEditClick(ipAddress._id, null)}>\n                                    <EditIcon  />\n                                </IconButton>\n                                    <CardActionArea>\n                                        <CardContent>\n                                            <Typography gutterBottom variant=\"h5\" component=\"h2\">\n                                                {!ipAddress.editing ? <div>IP: <b>{ipAddress.ip}</b></div> :   \n                                                    <div className={classes.textFieldCenter}>\n                                                        IP: <TextField type=\"text\" defaultValue={ipAddress.ip} variant=\"outlined\" onChange={(e) => onChanges(e, 'ip', ipAddress._id)} />\n                                                    </div>\n                                                }\n                                            </Typography>\n                                            <List>\n                                                <ListItem>\n                                                    <ListItemAvatar>\n                                                        <Avatar className={classes.avatar}>\n                                                            <PublicIcon style={{fill: 'blue'}}/>\n                                                        </Avatar>\n                                                    </ListItemAvatar>\n                                                    <ListItemText>\n                                                        {!ipAddress.editing ? ipAddress.country : \n                                                            <div>\n                                                                <TextField variant=\"outlined\" defaultValue={ipAddress.country} onChange={(e) => onChanges(e, 'country', ipAddress._id)} />\n                                                            </div>\n                                                        }\n                                                    </ListItemText>\n                                                </ListItem>\n                                                <ListItem>\n                                                    <ListItemAvatar>\n                                                        <Avatar className={classes.avatar}>\n                                                            <LocationCityIcon color=\"secondary\"/>\n                                                        </Avatar>\n                                                    </ListItemAvatar>\n                                                    <ListItemText>\n                                                        {!ipAddress.editing ? ipAddress.city : \n                                                            <div>\n                                                                <TextField variant=\"outlined\" defaultValue={ipAddress.city} onChange={(e) => onChanges(e, 'city', ipAddress._id)} />\n                                                            </div>\n                                                        }\n                                                        </ListItemText>\n                                                </ListItem>\n                                                <ListItem>\n                                                    <ListItemAvatar>\n                                                        <Avatar className={classes.avatar}>\n                                                            <LandscapeIcon style={{fill: 'green'}}/>\n                                                        </Avatar>\n                                                    </ListItemAvatar>\n                                                    <ListItemText>\n                                                        {!ipAddress.editing ? ipAddress.region :\n                                                            <div>\n                                                                <TextField variant=\"outlined\" defaultValue={ipAddress.region} onChange={(e) => onChanges(e, 'region', ipAddress._id)} />\n                                                            </div>\n                                                        }\n                                                        </ListItemText>\n                                                </ListItem>\n                                                <ListItem>\n                                                    <ListItemAvatar>\n                                                        <Avatar className={classes.avatar}>\n                                                            <ScheduleIcon style={{fill: 'orange'}}/>\n                                                        </Avatar>\n                                                    </ListItemAvatar>\n                                                    <ListItemText>\n                                                        {!ipAddress.editing ? ipAddress.timezone :\n                                                            <div>\n                                                                <TextField variant=\"outlined\" defaultValue={ipAddress.timezone} onChange={(e) => onChanges(e, 'timezone', ipAddress._id)} />\n                                                            </div>\n                                                        }\n                                                        </ListItemText>\n                                                </ListItem>\n                                                <ListItem>\n                                                    <ListItemAvatar>\n                                                        <Avatar className={classes.avatar}>\n                                                            <BusinessCenterIcon style={{fill: 'purple'}}/>\n                                                        </Avatar>\n                                                    </ListItemAvatar>\n                                                    <ListItemText>\n                                                        {!ipAddress.editing ? ipAddress.organization :\n                                                            <div>\n                                                                <TextField variant=\"outlined\" defaultValue={ipAddress.organization} onChange={(e) => onChanges(e, 'organization', ipAddress._id)} />\n                                                            </div>\n                                                        }\n                                                    </ListItemText>\n                                                </ListItem>\n                                            </List>\n                                        </CardContent>\n                                    </CardActionArea>\n                                    <CardActions>\n                                        {!ipAddress.editing ?\n                                            <Button size=\"small\" color=\"secondary\" variant=\"contained\" startIcon={<DeleteIcon />} onClick={() => deleteIP(ipAddress._id)}>\n                                                Delete\n                                            </Button>\n                                        : \n                                            <Button size=\"small\" color=\"primary\" variant=\"contained\" startIcon={<SaveAltIcon />} onClick={() => saveChanges(ipAddress._id)}>Save Changes</Button>\n                                        }\n                                    </CardActions>\n                                </Card>\n                        )\n                    })} \n   </div>\n       }\n        \n        </>\n    )\n}\n\nexport default Favorites;","import React, { useState, createContext } from 'react';\n\nexport const IPdataContext = createContext();\n\nconst IPdataContextProvider = (props) => {\n    const [ipAddressData] = useState({})\n\n    return (\n        <IPdataContext.Provider value={{ipAddressData}}>\n            {props.children}\n        </IPdataContext.Provider>\n    )\n}\n\nexport default IPdataContextProvider;","import './App.css';\nimport Header from './components/Header';\nimport Location from './components/Location';\nimport { Switch, Route } from 'react-router-dom';\nimport Favorites from './components/Favorites';\nimport IPdataContextProvider from './contexts/IPdata';\n\n\nconst App = () => {\n  return (\n    <div>\n      <Header />\n      <IPdataContextProvider>\n        <Switch>\n          <Route path='/favorites' component={Favorites}/>\n          <Route path='/' exact component={Location}/>\n        </Switch>\n      </IPdataContextProvider>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}